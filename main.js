!function(){"use strict";const t=document.querySelector(".form"),e=document.querySelector(".profile__info-button"),s=document.querySelector(".profile__button"),n=document.querySelector("#form_post"),i={formSelector:".form",inputSelector:".form__info-input",submitButtonSelector:".form__info-button",inactiveButtonClass:"form__info-button_disabled",inputErrorClass:"form__info-input_type_error",errorClass:"form__info_error_visible"};var o=class{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inactiveErrosClass,this._errorClass=t.errorClass,this._form=e,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(t){const e=this._form.querySelector("#".concat(t.id,"-error"));e.textContent=t.validationMessage,e.classList.add(this._errorClass),t.classList.add(this._inputErrorClass)}_hideInputError(t){const e=this._form.querySelector("#".concat(t.id,"-error"));e.textContent="",e.classList.remove(this._errorClass),t.classList.remove(this._errorClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_checkIfAllInputsValid(){return this._inputList.every((t=>t.validity.valid))}toggleButton(){this._checkIfAllInputsValid()?(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)):(this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass))}_setEventListeners(){this.toggleButton(),this._inputList.forEach((t=>{t.addEventListener("input",(e=>{e.preventDefault(),this._checkInputValidity(t),this.toggleButton()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>t.preventDefault())),this._setEventListeners()}};class r{constructor(t){this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_enabled"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_enabled"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(t=>{t.target.classList.contains("popup")&&this.close()})),this._popup.querySelector(".popup__content-close").addEventListener("click",(()=>this.close()))}}class a extends r{constructor(t,e){let{handleFormSubmit:s}=e;super(t),this._form=this._popup.querySelector(".form"),this._handleFormSubmit=s,this._inputList=this._form.querySelectorAll(".form__info-input")}_getInputValues(){return this._data={},this._inputList.forEach((t=>{this._data[t.name]=t.value})),this._data}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}close(){super.close(),this._form.reset()}}const l=new class{constructor(t){let{nameSelector:e,jobSelector:s}=t;this._name=document.querySelector(e),this._job=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,occupation:this._job.textContent}}setUserInfo(t){this._name.textContent=t.name,this._job.textContent=t.occupation}}({nameSelector:".profile__info-title",jobSelector:".profile__info-subtitle"}),c=new a("#edit_popup",{handleFormSubmit:t=>{l.setUserInfo(t)}}),u=new a("#popup_post",{handleFormSubmit:t=>{const e=d(t);p.addItem(e)}}),_=new class extends r{constructor(t){super(t),this._caption=this._popup.querySelector(".popup__title"),this._popupImage=this._popup.querySelector(".popup__image")}open(t,e){super.open(),this._caption.textContent=t,this._popupImage.src=e,this._popupImage.alt="A photo of ".concat(t)}}(".popup_type_preview");_.setEventListeners(),s.addEventListener("click",(()=>{u.open(),f.toggleButton()})),u.setEventListeners(),e.addEventListener("click",(()=>{c.open(),c.setInputValues(l.getUserInfo()),m.toggleButton()})),c.setEventListeners();const d=t=>new class{constructor(t,e,s){this.handleCardClick=s,this._name=t.name,this._link=t.link,this._cardSelector=e}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_handleLikeIcon(t){t.target.classList.toggle("card__info-button_active")}_handleDeleteIcon(){this._template.remove(),this._template=null}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLikeIcon),this._deleteButton.addEventListener("click",this._handleDeleteIcon.bind(this)),this._cardImage.addEventListener("click",this.handleCardClick)}generateCard(){return this._template=this._getTemplate(),this._likeButton=this._template.querySelector(".card__info-button"),this._deleteButton=this._template.querySelector(".card__trash"),this._cardImage=this._template.querySelector(".card__image"),this._template.querySelector(".card__info-title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt="A picture of ".concat(this._name),this._setEventListeners(),this._template}}(t,"#card-template",(()=>{h(t)})).generateCard(),h=t=>{_.open(t.name,t.link)},p=new class{constructor(t,e){let{items:s,renderer:n}=t;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(e)}addItem(t){this._container.prepend(t)}renderItems(){this._renderedItems.forEach((t=>{this._renderer(t)}))}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:t=>{const e=d(t);p.addItem(e)}},".elements");p.renderItems();const m=new o(i,t),f=new o(i,n);m.enableValidation(),f.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,